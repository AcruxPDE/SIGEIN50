-- =============================================
-- Proyecto: Sistema Nomina
-- Copyright (c) - Acrux - 2014
-- Author: 
-- CRETAE date: 18/09/2015
-- Description: Inserta un nuevo registro en la tabla S_CONFIGURACION
-- =============================================
CREATE PROCEDURE [ADM].[SPE_INSERTA_ACTUALIZA_S_CONFIGURACION] 
		  @XML_RESULTADO XML = '' OUT		      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
    	, @PIN_XML_CONFIGURACION AS xml
		, @PIN_FI_LOGOTIPO AS VARBINARY(MAX)
		, @PIN_CL_USUARIO_MODIFICA AS nvarchar(50)
		, @PIN_NB_PROGRAMA_MODIFICA AS nvarchar(50)
		, @PIN_TIPO_TRANSACCION CHAR(1)             --I=INSERCIÓN   A=ACTUALIZACIÓN

AS 
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
		, @FE_SISTEMA DATETIME = GETDATE()
		, @ID_ARCHIVO UNIQUEIDENTIFIER
		, @NB_ARCHIVO NVARCHAR(512)
		, @XML_CONFIGURACION XML = (SELECT TOP 1 XML_CONFIGURACION FROM ADM.S_CONFIGURACION)

    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
		IF @PIN_TIPO_TRANSACCION='I' BEGIN
			--SE INSERTA EL REGISTRO EN LA TABLA  ADM.S_CONFIGURACION
			INSERT INTO ADM.S_CONFIGURACION (XML_CONFIGURACION, CL_USUARIO_MODIFICA)
			VALUES (@PIN_XML_CONFIGURACION, @PIN_CL_USUARIO_MODIFICA)			
		END ELSE BEGIN

			DECLARE @XML_LOGOTIPO XML = (
				SELECT T.query('.') FROM @XML_CONFIGURACION.nodes('/CONFIGURACIONES/EMPRESA/LOGOTIPO') X(T)
			)

			DECLARE @ID_ARCHIVO_NUEVO UNIQUEIDENTIFIER
				, @NB_ARCHIVO_NUEVO NVARCHAR(512)
				--, @ID_ARCHIVO_ALMACENADO UNIQUEIDENTIFIER = SELECT TOP 1 NULLIF(@XML_CONFIGURACION_ALMACENADA.value('/CONFIGURACIONES[1]/EMPRESA[1]/LOGOTIPO[1]/@ID_ARCHIVO', 'NVARCHAR(40)'), '')
				, @ID_ARCHIVO_ALMACENADO UNIQUEIDENTIFIER = (SELECT TOP 1 NULLIF(XML_CONFIGURACION.value('/CONFIGURACIONES[1]/EMPRESA[1]/LOGOTIPO[1]/@ID_ARCHIVO', 'NVARCHAR(40)'), '') FROM ADM.S_CONFIGURACION)

			SELECT @ID_ARCHIVO_NUEVO = NULLIF(T.value('@ID_ARCHIVO', 'NVARCHAR(40)'), '')
				, @NB_ARCHIVO_NUEVO = T.value('@NB_ARCHIVO', 'NVARCHAR(512)')
			FROM @XML_LOGOTIPO.nodes('/LOGOTIPO') X(T)

			SELECT @ID_ARCHIVO_NUEVO, @NB_ARCHIVO_NUEVO, @XML_LOGOTIPO

			IF(@XML_LOGOTIPO IS NULL) BEGIN
				DELETE FROM ADM.K_ARCHIVO WHERE ID_ARCHIVO = @ID_ARCHIVO_ALMACENADO
			END ELSE IF(@PIN_FI_LOGOTIPO IS NOT NULL) BEGIN
				MERGE ADM.K_ARCHIVO AS T USING (
					SELECT @ID_ARCHIVO_ALMACENADO
				) AS S (
					ID_ARCHIVO
				)
				ON S.ID_ARCHIVO = T.ID_ARCHIVO
				WHEN MATCHED THEN
					UPDATE SET NB_ARCHIVO = @NB_ARCHIVO_NUEVO
						, FI_ARCHIVO = @PIN_FI_LOGOTIPO
						, FE_MODIFICACION = @FE_SISTEMA
						, CL_USUARIO_APP_MODIFICA = @PIN_CL_USUARIO_MODIFICA
						, NB_PROGRAMA_MODIFICA = @PIN_NB_PROGRAMA_MODIFICA
				WHEN NOT MATCHED THEN 
					INSERT (
						ID_ARCHIVO
						, NB_ARCHIVO
						, FI_ARCHIVO
						, FE_CREACION
						, CL_USUARIO_APP_CREA
						, NB_PROGRAMA_CREA
					) VALUES (
						@ID_ARCHIVO_NUEVO
						, @NB_ARCHIVO_NUEVO
						, @PIN_FI_LOGOTIPO
						, @FE_SISTEMA
						, @PIN_CL_USUARIO_MODIFICA
						, @PIN_NB_PROGRAMA_MODIFICA
					);
			END

			--SE ACTUALIZA EL REGISTRO EN LA TABLA  ADM.S_CONFIGURACION
			UPDATE ADM.S_CONFIGURACION SET
				XML_CONFIGURACION = @PIN_XML_CONFIGURACION
				, FE_MODIFICACION = @FE_SISTEMA
				, CL_USUARIO_MODIFICA = @PIN_CL_USUARIO_MODIFICA
				, NB_PROGRAMA_MODIFICA = @PIN_NB_PROGRAMA_MODIFICA
		END
		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, ERROR_NUMBER(), 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT	
	END TRY
	BEGIN CATCH		
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
		--SE INDICA EN LA VARIABLE DE RETORNO QUE OCURRIO UN ERROR
		--SET @POUT_CLAVE_RETORNO = 0
		--SE INSERTA EL ERROR EN LA TABLA		
		DECLARE @ERROR_CLAVE INT  = 	ERROR_NUMBER()
		DECLARE @ERROR_MENSAJE NVARCHAR(250)  = 	 ERROR_MESSAGE()
		
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @ERROR_CLAVE, 'ERROR')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Ocurrió un error al procesar el registro', 'EN')
			
	END CATCH
END
