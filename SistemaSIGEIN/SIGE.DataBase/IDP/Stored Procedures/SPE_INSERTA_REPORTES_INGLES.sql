-- =============================================
-- Proyecto: Sistema SIGEIN 5.0
-- Copyright (c) - Acrux - 2015
-- Author: Juan De Dios Pérez Pedroza
-- CREATE date: 29/01/2016
-- Description: Variables correspondientes a las respuestas de las pruebas
-- =============================================
CREATE PROCEDURE [IDP].[SPE_INSERTA_REPORTES_INGLES]
	@XML_RESULTADO XML = '' OUT      --APLICA PARA REGRESAR UN NÚMERO 0 PARA ERROR Y 1 PARA CORRECTO
	,@PIN_ID_PRUEBA AS INT
	,@PIN_ID_CUESTIONARIO AS INT
	,@PIN_NB_PRUEBA AS NVARCHAR(20)
	,@PIN_CL_USUARIO_APP AS NVARCHAR(50)
	,@PIN_NB_PROGRAMA AS NVARCHAR(50)

AS
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0,
	@PIN_SECCION_INGLES DECIMAL(7,2) =0,
	@PIN_TOTAL DECIMAL(7,2) =0,
	@PIN_NIVEL DECIMAL(7,2) =0
    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	

		 ---------------------------------------------RESULTADOS DE APLICACION---------------------------------------------
	
	IF @PIN_ID_PRUEBA IS NULL
	BEGIN

	IF @PIN_NB_PRUEBA = 'INGLES-1'
	BEGIN
		SELECT @PIN_SECCION_INGLES =
			       (SELECT
							SUM(ISNULL(KR.NO_VALOR,0)) AS RESULTADO_T
							FROM IDP.K_RESULTADO kr
							JOIN IDP.C_VARIABLE cv ON kr.ID_VARIABLE = cv.ID_VARIABLE
					        WHERE 
							kr.ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO AND (
							cv.CL_VARIABLE = 'INGLES_RES_S1' 
					))
    END


	IF @PIN_NB_PRUEBA = 'INGLES-2'
	BEGIN
		SELECT @PIN_SECCION_INGLES =
				   (SELECT
    						SUM(ISNULL(KR.NO_VALOR,0)) AS RESULTADO_T
							FROM IDP.K_RESULTADO kr
							JOIN IDP.C_VARIABLE cv ON kr.ID_VARIABLE = cv.ID_VARIABLE
							WHERE 
							kr.ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO AND (
							cv.CL_VARIABLE = 'INGLES_RES_S2' 
				   ))
    END


	IF @PIN_NB_PRUEBA = 'INGLES-3'
	BEGIN
		SELECT @PIN_SECCION_INGLES =
			       (SELECT
							SUM(ISNULL(KR.NO_VALOR,0)) AS RESULTADO_T
							FROM IDP.K_RESULTADO kr
							JOIN IDP.C_VARIABLE cv ON kr.ID_VARIABLE = cv.ID_VARIABLE
					        WHERE 
							kr.ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO AND (
							cv.CL_VARIABLE = 'INGLES_RES_S3' 
					))
	END


	IF @PIN_NB_PRUEBA = 'INGLES-4'
	BEGIN
		SELECT @PIN_SECCION_INGLES =
			       (SELECT
							SUM(ISNULL(KR.NO_VALOR,0)) AS RESULTADO_T
							FROM IDP.K_RESULTADO kr
							JOIN IDP.C_VARIABLE cv ON kr.ID_VARIABLE = cv.ID_VARIABLE
					        WHERE 
							kr.ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO AND (
							cv.CL_VARIABLE = 'INGLES_RES_S4' 
					))
	END

	
				SELECT @PIN_TOTAL = 
				(SELECT ISNULL(NO_VALOR,0) FROM IDP.K_RESULTADO kr INNER JOIN IDP.C_VARIABLE cv ON cv.ID_VARIABLE=kr.ID_VARIABLE   
				WHERE cv.CL_VARIABLE='INGLES_REP_TOTAL')
				
				
				IF @PIN_TOTAL IS NULL
				BEGIN
				SELECT @PIN_TOTAL = 0
				END


				SELECT @PIN_TOTAL = @PIN_TOTAL + @PIN_SECCION_INGLES

					SET @PIN_NIVEL = CASE 
												WHEN @PIN_TOTAL BETWEEN 0 AND 24 THEN 1--Bajo
												WHEN @PIN_TOTAL BETWEEN 25 AND 56 THEN 2--Principiante
												WHEN @PIN_TOTAL BETWEEN 57 AND 72 THEN 3--IntermedioB
												WHEN @PIN_TOTAL BETWEEN 72 AND 96 THEN 4--IntermedioA
												WHEN @PIN_TOTAL BETWEEN 96 AND 120 THEN 5--Avanzado
												ELSE 0 
				                     END

			--1149  INGLES_REP_TOTAL
			--1150  INGLES_NIVEL
			--1155   INGLES_TOTAL

			  DELETE FROM IDP.K_RESULTADO 
	          WHERE ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO AND CL_TIPO_RESULTADO = 3

			  INSERT INTO [IDP].[K_RESULTADO] ([CL_TIPO_RESULTADO] ,[ID_VARIABLE] ,[NO_VALOR], [ID_CUESTIONARIO],[FE_CREACION],[CL_USUARIO_APP_CREA],[NB_PROGRAMA_CREA])
			  VALUES 
			 (3,1149,(@PIN_TOTAL/120)*100, @PIN_ID_CUESTIONARIO,GETDATE(),@PIN_CL_USUARIO_APP,@PIN_NB_PROGRAMA),
			 (3,1150,(@PIN_NIVEL), @PIN_ID_CUESTIONARIO,GETDATE(),@PIN_CL_USUARIO_APP,@PIN_NB_PROGRAMA),
			 (3,1155,(@PIN_TOTAL), @PIN_ID_CUESTIONARIO,GETDATE(),@PIN_CL_USUARIO_APP,@PIN_NB_PROGRAMA)


			 --1155

		END


		-----------------------------------------CAPTURA MANUAL--------------------------------------------------
		--------------------------------------------------------------------------------------------------------

		IF @PIN_ID_PRUEBA IS NOT NULL
		BEGIN 
			SELECT @PIN_TOTAL =
			       (SELECT
							SUM(ISNULL(KR.NO_VALOR,0)) AS RESULTADO_T
							FROM IDP.K_RESULTADO kr
							JOIN IDP.C_VARIABLE cv ON kr.ID_VARIABLE = cv.ID_VARIABLE
					        WHERE 
							kr.ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO AND (
							cv.CL_VARIABLE = 'INGLES_RES_S1' OR
							cv.CL_VARIABLE = 'INGLES_RES_S2' OR
							cv.CL_VARIABLE = 'INGLES_RES_S3' OR
							cv.CL_VARIABLE = 'INGLES_RES_S4'  
					))

						SELECT @PIN_TOTAL = @PIN_TOTAL + @PIN_SECCION_INGLES

					SET @PIN_NIVEL = CASE 
												WHEN @PIN_TOTAL BETWEEN 0 AND 24 THEN 1--Bajo
												WHEN @PIN_TOTAL BETWEEN 25 AND 56 THEN 2--Principiante
												WHEN @PIN_TOTAL BETWEEN 57 AND 72 THEN 3--IntermedioB
												WHEN @PIN_TOTAL BETWEEN 72 AND 96 THEN 4--IntermedioA
												WHEN @PIN_TOTAL BETWEEN 96 AND 120 THEN 5--Avanzado
												ELSE 0 
				                     END

									 
			  DELETE FROM IDP.K_RESULTADO 
	          WHERE ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO AND CL_TIPO_RESULTADO = 3

			  INSERT INTO [IDP].[K_RESULTADO] ([CL_TIPO_RESULTADO] ,[ID_VARIABLE] ,[NO_VALOR], [ID_CUESTIONARIO],[FE_CREACION],[CL_USUARIO_APP_CREA],[NB_PROGRAMA_CREA])
			  VALUES 
			 (3,1149,(@PIN_TOTAL/120)*100, @PIN_ID_CUESTIONARIO,GETDATE(),@PIN_CL_USUARIO_APP,@PIN_NB_PROGRAMA),
			 (3,1150,(@PIN_NIVEL), @PIN_ID_CUESTIONARIO,GETDATE(),@PIN_CL_USUARIO_APP,@PIN_NB_PROGRAMA),
			 (3,1155,(@PIN_TOTAL), @PIN_ID_CUESTIONARIO,GETDATE(),@PIN_CL_USUARIO_APP,@PIN_NB_PROGRAMA)

	END
		-----------------------------FIN CAPTURA MANUAL---------------------------------------------------------------------------



		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT
	END TRY
	BEGIN CATCH
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
		--SE INDICA EN LA VARIABLE DE RETORNO QUE OCURRIO UN ERROR
		--SET @POUT_CLAVE_RETORNO = 0
		--SE INSERTA EL ERROR EN LA TABLA
		DECLARE @ERROR_CLAVE INT  = ERROR_NUMBER()
		DECLARE @ERROR_MENSAJE NVARCHAR(250)  = ERROR_MESSAGE()
		
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @ERROR_CLAVE, 'ERROR')
		SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(@ERROR_CLAVE,@ERROR_MENSAJE)
		SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(@ERROR_CLAVE,@ERROR_MENSAJE)			
	END CATCH
END


