-- =============================================
-- Proyecto: SIGEIN 5.0
-- Copyright (c) - Acrux - 2015
-- Author: Daniela Sanchez
-- CRETAE date: 20/01/2016
-- Description: Inserta variables de respuesta de la prueba Aptitud metal 1
-- =============================================
CREATE PROCEDURE [IDP].[SPE_INSERTA_REPORTE_APTITUD1]
	 @XML_RESULTADO XML = '' OUT 
	,@PIN_ID_CUESTIONARIO AS INT = NULL
	,@PIN_CL_USUARIO_APP AS nvarchar(50)
    ,@PIN_NB_PROGRAMA AS nvarchar(50)
	AS
BEGIN  
	--SE DECLARA E INICIALIZA LA VARIABLE QUE NOS INDICARA SI GENERAMOS LA TRANSACCION EN ESTE SP
	DECLARE @V_EXIST_TRAN BIT = 0
    	BEGIN TRY
		--SE VERIFICA SI EXISTE UNA TRANSACCION EN EJECUCION
		IF (@@TRANCOUNT = 0) 
		BEGIN
			--EN CASO DE QUE NO SE INICIALIZA LA TRANSACCION
			BEGIN TRANSACTION
			--SE EDITA LA VARIABLE QUE INDICA QUE SE INICIO LA TRANSACCION EN ESTE BLOQUE PARA CANCELARLA SI ES NECESARIO
			SET @V_EXIST_TRAN = 1
		END	
		--SE VERIFICA SI SE INSERTA EL REGISTRO O SE ACTUALIZARA SEGUN LA VARIABLE DE TIPO DE TRANSACCION  QUE RECIBE EL SP
			
			DECLARE @V_ID_DESCRIPCION_TOTAL AS INT,
					@V_ID_DESCRIPCION_CI AS INT,
					@V_NO_TOTAL AS INT,
					@V_NO_CI AS INT

			DECLARE @FE_SISTEMA DATETIME = GETDATE()

			DECLARE @T_SECCIONES TABLE (
				ID_VARIABLE_RESULTADO INT
				, CL_VARIABLE_RESULTADO NVARCHAR(50)
				, NO_TOTAL_ACIERTOS INT
				, ID_VARIABLE_ACIERTOS INT
				, CL_VARIABLE_ACIERTOS NVARCHAR(50))


			DELETE K_RESULTADO WHERE ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO AND CL_TIPO_RESULTADO = 3

			-- OBTENEMOS LOS RESULTADOS DE LAS 10 SECCIONES
			

			INSERT INTO @T_SECCIONES (CL_VARIABLE_RESULTADO, NO_TOTAL_ACIERTOS, CL_VARIABLE_ACIERTOS)
			SELECT 'APTITUD1_REP_0001',16,'APTITUD1-RES-0001' UNION ALL
			SELECT 'APTITUD1_REP_0002',22,'APTITUD1-RES-0002' UNION ALL
			SELECT 'APTITUD1_REP_0003',30,'APTITUD1-RES-0003' UNION ALL
			SELECT 'APTITUD1_REP_0004',18,'APTITUD1-RES-0004' UNION ALL
			SELECT 'APTITUD1_REP_0005',24,'APTITUD1-RES-0005' UNION ALL
			SELECT 'APTITUD1_REP_0006',20,'APTITUD1-RES-0006' UNION ALL
			SELECT 'APTITUD1_REP_0007',20,'APTITUD1-RES-0007' UNION ALL
			SELECT 'APTITUD1_REP_0008',17,'APTITUD1-RES-0008' UNION ALL
			SELECT 'APTITUD1_REP_0009',18,'APTITUD1-RES-0009' UNION ALL
			SELECT 'APTITUD1_REP_0010',22,'APTITUD1-RES-0010'

			UPDATE TS SET 
				ID_VARIABLE_ACIERTOS = CVA.ID_VARIABLE
				, ID_VARIABLE_RESULTADO = CVR.ID_VARIABLE
			FROM @T_SECCIONES TS
				INNER JOIN IDP.C_VARIABLE CVR
					ON TS.CL_VARIABLE_RESULTADO = CVR.CL_VARIABLE
				INNER JOIN IDP.C_VARIABLE CVA
					ON TS.CL_VARIABLE_ACIERTOS = CVA.CL_VARIABLE

			INSERT INTO [IDP].[K_RESULTADO]([CL_TIPO_RESULTADO],[ID_VARIABLE],[NO_VALOR],[ID_CUESTIONARIO],[FE_CREACION],[CL_USUARIO_APP_CREA],[NB_PROGRAMA_CREA])
			SELECT 3, TS.ID_VARIABLE_RESULTADO, CASE WHEN (100 * KS.NO_VALOR / TS.NO_TOTAL_ACIERTOS) > 0 THEN (100 * KS.NO_VALOR / TS.NO_TOTAL_ACIERTOS) ELSE 0 END, @PIN_ID_CUESTIONARIO, @FE_SISTEMA, @PIN_CL_USUARIO_APP, @PIN_NB_PROGRAMA FROM @T_SECCIONES TS
				INNER JOIN IDP.K_RESULTADO KS
					ON TS.ID_VARIABLE_ACIERTOS = KS.ID_VARIABLE
					AND KS.ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO 

			SELECT @V_NO_TOTAL = SUM(NO_VALOR) FROM IDP.K_RESULTADO WHERE  ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO AND CL_TIPO_RESULTADO = 2 GROUP BY ID_CUESTIONARIO

			-- OBTENEMOS EL TOTAL DE LAS 10 SECCIONES
			INSERT INTO [IDP].[K_RESULTADO]([CL_TIPO_RESULTADO],[ID_VARIABLE],[NO_VALOR],[ID_CUESTIONARIO],[FE_CREACION],[CL_USUARIO_APP_CREA],[NB_PROGRAMA_CREA]) SELECT 3 AS CL_TIPO_RESULTADO, 1145 AS ID_VARIABLE, @V_NO_TOTAL, @PIN_ID_CUESTIONARIO, GETDATE(), @PIN_CL_USUARIO_APP, @PIN_NB_PROGRAMA --FROM IDP.K_RESULTADO WHERE  ID_CUESTIONARIO = @PIN_ID_CUESTIONARIO AND CL_TIPO_RESULTADO = 2 GROUP BY ID_CUESTIONARIO
			
			SET @V_NO_CI = IDP.F_OBTIENE_CI(@PIN_ID_CUESTIONARIO,1)

			-- OBTENEMOS EL COEFICIENTE INTELECTUAL
			INSERT INTO [IDP].[K_RESULTADO]([CL_TIPO_RESULTADO],[ID_VARIABLE],[NO_VALOR],[ID_CUESTIONARIO],[FE_CREACION],[CL_USUARIO_APP_CREA],[NB_PROGRAMA_CREA]) SELECT 3 AS CL_TIPO_RESULTADO, 1146 AS ID_VARIABLE, @V_NO_CI, @PIN_ID_CUESTIONARIO, GETDATE(), @PIN_CL_USUARIO_APP, @PIN_NB_PROGRAMA 
			

			SET @V_ID_DESCRIPCION_TOTAL = CASE 
												WHEN @V_NO_TOTAL BETWEEN 67 AND 94 THEN 1
												WHEN @V_NO_TOTAL BETWEEN 95 AND 101 THEN 2
												WHEN @V_NO_TOTAL BETWEEN 102 AND 122 THEN 3
												WHEN @V_NO_TOTAL BETWEEN 123 AND 136 THEN 4
												WHEN @V_NO_TOTAL BETWEEN 137 AND 150 THEN 5
												WHEN @V_NO_TOTAL BETWEEN 151 AND 171 THEN 6
												WHEN @V_NO_TOTAL >= 172 THEN 7
												ELSE 0 END
			
			INSERT INTO [IDP].[K_RESULTADO]([CL_TIPO_RESULTADO],[ID_VARIABLE],[NO_VALOR],[ID_CUESTIONARIO],[FE_CREACION],[CL_USUARIO_APP_CREA],[NB_PROGRAMA_CREA]) SELECT 3 AS CL_TIPO_RESULTADO, 1147 AS ID_VARIABLE, @V_ID_DESCRIPCION_TOTAL, @PIN_ID_CUESTIONARIO, GETDATE(), @PIN_CL_USUARIO_APP, @PIN_NB_PROGRAMA 

			SET @V_ID_DESCRIPCION_CI = CASE
											WHEN @V_NO_CI BETWEEN 0 AND 49 THEN 1
											WHEN @V_NO_CI BETWEEN 50 AND 69 THEN 2
											WHEN @V_NO_CI BETWEEN 70 AND 79 THEN 3
											WHEN @V_NO_CI BETWEEN 80 AND 89 THEN 4
											WHEN @V_NO_CI BETWEEN 90 AND 110 THEN 5
											WHEN @V_NO_CI BETWEEN 111 AND 120 THEN 6
											WHEN @V_NO_CI >= 121 THEN 7
											ELSE 0 END
		
			INSERT INTO [IDP].[K_RESULTADO]([CL_TIPO_RESULTADO],[ID_VARIABLE],[NO_VALOR],[ID_CUESTIONARIO],[FE_CREACION],[CL_USUARIO_APP_CREA],[NB_PROGRAMA_CREA]) SELECT 3 AS CL_TIPO_RESULTADO, 1148 AS ID_VARIABLE, @V_ID_DESCRIPCION_CI, @PIN_ID_CUESTIONARIO, GETDATE(), @PIN_CL_USUARIO_APP, @PIN_NB_PROGRAMA 

		--SE DEVUELVE LA VARIABLE DE RETORNO INDICANDO QUE TODO SE REALIZO CORRECTAMENTE
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, 1, 'SUCCESSFUL')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Proceso exitoso', 'ES')
		SET @XML_RESULTADO = DBO.F_ERROR_INSERTAR_MENSAJES(@XML_RESULTADO, 'Successful Process', 'EN')
		--SI SE GENERO UNA TRANSACCION EN ESTE BLOQUE LA TERMINARA
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			COMMIT
	END TRY
	BEGIN CATCH
		--SI OCURRIO UN ERROR Y SE INICIO UNA TRANSACCION ENE ESTE BLOQUE SE CANCELARA LA TRANSACCION
		IF (@@TRANCOUNT > 0 AND @V_EXIST_TRAN = 1)
			ROLLBACK
		--SE INDICA EN LA VARIABLE DE RETORNO QUE OCURRIO UN ERROR
		--SET @POUT_CLAVE_RETORNO = 0
		--SE INSERTA EL ERROR EN LA TABLA
		DECLARE @ERROR_CLAVE INT  = ERROR_NUMBER()
		DECLARE @ERROR_MENSAJE NVARCHAR(250)  = ERROR_MESSAGE()
		
		SET @XML_RESULTADO = DBO.F_ERROR_CREAR_ENCABEZADO( @@ROWCOUNT, @ERROR_CLAVE, 'ERROR')
		SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(@ERROR_CLAVE,@ERROR_MENSAJE)
		SET @XML_RESULTADO = DBO.F_ERROR_MENSAJES(@ERROR_CLAVE,@ERROR_MENSAJE)			
	END CATCH
END


